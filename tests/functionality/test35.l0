type Btree = [
  nul:unit;
  Node:{ left:Btree; val:int; right:Btree }
];
let countNodes = fn t:Btree => {
  match t {
    nul(p) -> 0
    | Node(p) -> 1 + (countNodes (p.left)) + (countNodes (p.right))
  }
};
let tree = Node({ left=Node({ left=nul(()); val=1; right=nul(()) });
            val=2;
            right=Node({ left=nul(()); val=3; right=Node({ left=nul(()); val=4; right=nul(()) }) }) });

let result = countNodes (tree);
result;;