PARSER_BEGIN(Parser)

import java.util.*;

public class Parser {
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{

  < LET : "let" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < STAR : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < EQUAL : "=" >
  |
  < COLON : ":" >
  |
  < SEMIC : ";" >
  |
  < TERM : ";;" >
  |
  < COMMA : "," >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  |
  < EQ : "==" >
  |  
  < GT : ">" >
  |
  < LT : "<" >
  |
  < GTEQ : ">=" >
  |
  < LTEQ : "<=" >
  |
  < DIF : "~=" >
  |
  < NOT : "~" >
  |
  < ASSIGN : ":=" >
  |
  < BOX : "box" >
  |
  < IF : "if" >
  |
  < ELSE : "else" >
  |
  < WHILE : "while" >
  |
  < PRINT : "print" >
  |
  < PRINTLN : "println" >
  |
  < FN : "fn" >
  |
  < ARROW : "=>" >
  |
  < MATCH_ARROW : "->" >
  |
  < NIL : "nil" >
  |
  < DCOLON : "::" >
  |
  < LCONS : "?:" >
  |
  < MATCH : "match" >
  |
  < VBAR : "|" >
  |
  < String: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
}

ASTNode Start():
{ ASTNode t; }
{
    <EOF> {return null;}
  | t = Let() <TERM> { return t; }
}

ASTNode Let() :
{
  Token n; 
  ASTNode t, e1, e2;
  List<Bind> decls  = new ArrayList<Bind>();;
}
{ 
    (
    t = Seq()
    |
    ((<LET>  n=<Id>  <EQUAL> e1 = BA() <SEMIC>
      { decls.add(new Bind(n.image,e1)); }
     )+
        e2 = Seq() { t = new ASTLet(decls, e2); })
    )
    
   { return t; }
}

ASTNode Seq() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = SeqExp() ( ( op=<SEMIC> ) t2 = SeqExp() 
 		 {
		  t1 = new ASTSeq(t1, t2);
     }
		)*
     { return t1; }  
}

ASTNode SeqExp() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = BA() ( ( op=<ASSIGN> ) t2 = BA() 
 		 {
		  t1 = new ASTAssign(t1, t2);
     } 
		)*
     { return t1; }  
}

ASTNode BA() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BM() ( ( op=<OR> ) t2 = BM() 
 		 {
		  t1 = new ASTOr(t1, t2);
		 } 
		)*
     { return t1; } 
}

ASTNode BM() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Rel() ( ( op=<AND> ) t2 = Rel() 
 		 {
      t1 = new ASTAnd(t1, t2);
 		 } 
		)*
     { return t1; } 
}


ASTNode Rel() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Exp() ( ( op=<EQ> | op=<GT> | op=<LT> | op=<GTEQ> | op=<LTEQ> | op=<DIF>) t2 = Exp() 
     	  	  {
              if (op.kind == EQ) {
               t1 = new ASTEqual(t1, t2);
             } else if (op.kind == GT) {
               t1 = new ASTGreaterThan(t1, t2);
             } else if (op.kind == GTEQ) {
               t1 = new ASTGreaterEqual(t1, t2);
             } else if (op.kind == LT) {
               t1 = new ASTLowerThan(t1, t2);
             } else if (op.kind == LTEQ) {
               t1 = new ASTLowerEqual(t1, t2);
             } else if (op.kind == DIF) {
               t1 = new ASTNotEqual(t1, t2);
             }
		   } 
		)?
     { return t1; } 
}


ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Cons() (
     	  	 op=<STAR> t2 = Cons()   { t1 = new ASTMult(t1,t2); }
		 |
		 op=<DIV> t2 = Cons()  { t1 = new ASTDiv(t1,t2); }
		 |
		 op = <LPAR> t2 = Exp() <RPAR>  { /* TBC */ } 
		)*
     { return t1; } 
}

ASTNode Cons() :
{
  ASTNode t1, t2;
  Token op;
}
{
     t1 = Fact() ( 
         op=<DCOLON> t2 = Cons() { t1 = new ASTCons(t1, t2); }
         |
         op=<LCONS> t2 = Cons() { t1 = new ASTLCons(t1, t2); }
     )?
     { return t1; }
}

ASTNode Fact() :
{ 
  Token n; 
  ASTNode t, e1, e2;
  ASTNode body;
  ASTNode arg;
  String headVar, tailVar;
}
{
  (
    n=<Num> { t = new ASTInt(Integer.parseInt(n.image)); }
    | n=<TRUE> { t = new ASTTrue(); }
    | n=<FALSE> { t = new ASTFalse(); }
    | n=<NIL> { t = new ASTNil(); }
    | n=<Id> { t = new ASTId(n.image); } 
    | <BOX> t=Fact() { t = new ASTBox(t); }
    | <STAR> t=Fact() { t = new ASTDeref(t); }
    | <MINUS> t=Fact() { t = new ASTNeg(t); }
    | <NOT> t=Fact() { t = new ASTNot(t); }
    | <IF> t=BA() <LBRA> e1=Let() <RBRA> <ELSE> <LBRA> e2=Let() <RBRA> { t = new ASTIf(t, e1, e2); }
    | <WHILE> t=BA() <LBRA> body=Let() <RBRA> { t = new ASTWhile(t, body); }
    | <MATCH> t=BA() <LBRA> <NIL> <MATCH_ARROW> e1=Let() <VBAR> n=<Id> { headVar = n.image; } <DCOLON> n=<Id> { tailVar = n.image; } <MATCH_ARROW> e2=Let() <RBRA> 
      { t = new ASTMatch(t, e1, headVar, tailVar, e2); }
    | <FN> n=<Id>
      { 
        List params = new ArrayList<String>();
        params.add(n.image);
      }
      ( <COMMA> n = <Id> { params.add(n.image); } )*
      <ARROW> <LBRA> e2 = Let() <RBRA> { t = new ASTFun(params, e2); }
    | <PRINT> t=Fact() { t = new ASTPrint(t, false); }
    | <PRINTLN> t=Fact() { t = new ASTPrint(t, true); }
    | LOOKAHEAD(2) <LPAR> <LPAR> t=Let() <RPAR> <LPAR> e1=BA() <RPAR> <RPAR>
      {
        arg= e1;
        t = new ASTApp(t, arg);
      }
    | LOOKAHEAD(2) <LPAR> t=Let() <RPAR>
    | <LPAR> t=BA() <RPAR>
  )
  (LOOKAHEAD(1)
    <LPAR> e1=BA() { arg= e1; } <RPAR> { t = new ASTApp(t, arg); }
  )*
  { return t; }
}