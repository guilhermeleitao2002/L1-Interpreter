PARSER_BEGIN(Parser)

import java.util.*;

public class Parser {
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{

  < LET : "let" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < STAR : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < EQUAL : "=" >
  |
  < COLON : ":" >
  |
  < SEMIC : ";" >
  |
  < TERM : ";;" >
  |
  < UNION : "union" >
  |
  < STRUCT : "struct" >
  |
  < HASH : "#" >
  |
  < COMMA : "," >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  |
  < EQ : "==" >
  |  
  < GT : ">" >
  |
  < LT : "<" >
  |
  < GTEQ : ">=" >
  |
  < LTEQ : "<=" >
  |
  < DIF : "~=" >
  |
  < NOT : "~" >
  |
  < ASSIGN : ":=" >
  |
  < BOX : "box" >
  |
  < IF : "if" >
  |
  < ELSE : "else" >
  |
  < WHILE : "while" >
  |
  < PRINT : "print" >
  |
  < PRINTLN : "println" >
  |
  < FN : "fn" >
  |
  < ARROW : "=>" >
  |
  < MATCH_ARROW : "->" >
  |
  < NIL : "nil" >
  |
  < DCOLON : "::" >
  |
  < LCONS : ":?" >
  |
  < DREF : "!" >
  |
  < MATCH : "match" >
  |
  < UNDERSCORE : "_" >
  |
  < VBAR : "|" >
  |
  < String: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"" >
  |
  < TYPE : "type" >
  |
  < UNIT : "()" >
  |
  < STRING : "string" >
  |
  < INT : "int" >
  |
  < BOOL : "bool" >
  |
  < LIST : "list" >
  |
  < REF : "ref" >
  |
  < THEN : "then" >
  |
  < END : "end" >
  |
  < DO : "do" >
  |
  < DOT : "." >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
}

ASTNode Start():
{ ASTNode t; }
{
    <EOF> {return null;}
  | t = Let() <TERM> { return t; }
}

ASTNode Let() :
{
  Token n; 
  ASTNode t, e1, e2;
  ASTType typeExpr;
  List<Bind> decls = new ArrayList<Bind>();
  Map<String, ASTType> typeDefs = new HashMap<String, ASTType>();
}
{
  (
    // Type definitions first
    (
      <TYPE> n=<Id> <EQUAL> typeExpr = TypeExpr() <SEMIC>
      { typeDefs.put(n.image, typeExpr); }
    )*    
    // then Let bindings
    (
      (<LET> n=<Id> 
        (
          <COLON> typeExpr=TypeExpr() <EQUAL> e1 = BA() <SEMIC>
          { 
            if (typeExpr instanceof ASTTArrow || typeExpr instanceof ASTTFunction) {
              if (!(e1 instanceof ASTFun)) {
                throw new ParseException("Expected function expression for function type");
              }
            }
            decls.add(new Bind(n.image, typeExpr, e1)); 
          }
          |
          <EQUAL> e1 = BA() <SEMIC>
          { decls.add(new Bind(n.image, e1)); }
        )
      )+
      e2 = Seq() 
      { 
        t = new ASTLet(decls, e2);
        if (!typeDefs.isEmpty()) {
          t = new ASTTypeDef(typeDefs, t);
        }
      }
      |
      e2 = Seq() 
      { 
        t = e2;
        if (!typeDefs.isEmpty()) {
          t = new ASTTypeDef(typeDefs, t);
        }
      }
    )
  )
  { return t; }
}

ASTNode Seq() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = SeqExp() ( ( op=<SEMIC> ) t2 = SeqExp() 
 		 {
		  t1 = new ASTSeq(t1, t2);
     }
		)*
    { return t1; }  
}

ASTNode SeqExp() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = BA() ( ( op=<ASSIGN> ) t2 = BA() 
 		 {
		  t1 = new ASTAssign(t1, t2);
     } 
		)*
     { return t1; }  
}

ASTNode BA() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BM() ( ( op=<OR> ) t2 = BM() 
 		 {
		  t1 = new ASTOr(t1, t2);
		 } 
		)*
     { return t1; } 
}

ASTNode BM() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Rel() ( ( op=<AND> ) t2 = Rel() 
 		 {
      t1 = new ASTAnd(t1, t2);
 		 } 
		)*
     { return t1; } 
}


ASTNode Rel() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Exp() ( ( op=<EQ> | op=<GT> | op=<LT> | op=<GTEQ> | op=<LTEQ> | op=<DIF>) t2 = Exp() 
     	  	  {
              if (op.kind == EQ) {
               t1 = new ASTEqual(t1, t2);
             } else if (op.kind == GT) {
               t1 = new ASTGreaterThan(t1, t2);
             } else if (op.kind == GTEQ) {
               t1 = new ASTGreaterEqual(t1, t2);
             } else if (op.kind == LT) {
               t1 = new ASTLowerThan(t1, t2);
             } else if (op.kind == LTEQ) {
               t1 = new ASTLowerEqual(t1, t2);
             } else if (op.kind == DIF) {
               t1 = new ASTNotEqual(t1, t2);
             }
		   } 
		)?
     { return t1; } 
}


ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = Cons() (
     	  	 op=<STAR> t2 = Cons()   { t1 = new ASTMult(t1,t2); }
		 |
		 op=<DIV> t2 = Cons()  { t1 = new ASTDiv(t1,t2); }
		 |
		 op = <LPAR> t2 = Exp() <RPAR>  { t1 = new ASTApp(t1, t2); }
		)*
     { return t1; } 
}

ASTNode Cons() :
{
  ASTNode t1, t2;
  Token op;
}
{
     t1 = Fact() ( 
         op=<DCOLON> t2 = Cons() { t1 = new ASTCons(t1, t2); }
         |
         op=<LCONS> t2 = Cons() { t1 = new ASTLCons(t1, t2); }
     )?
     { return t1; }
}

ASTNode Fact() :
{ 
  Token n; 
  ASTNode t, e1, e2;
  ASTNode body;
  ASTNode arg;
  ASTType paramType;
  String headVar, tailVar;
  List<String> params = new ArrayList<String>();
  List<ASTType> paramTypes = new ArrayList<ASTType>();
  Map<String, ASTNode> structFields = new HashMap<String, ASTNode>();
  Map<String, ASTCaseBranch> casesBranches = new HashMap<String, ASTCaseBranch>();
  String stringLiteral;
}
{
  (
    n=<Num> { t = new ASTInt(Integer.parseInt(n.image)); }
    | n=<TRUE> { t = new ASTTrue(); }
    | n=<FALSE> { t = new ASTFalse(); }
    | n=<NIL> { t = new ASTNil(); }
    | LOOKAHEAD(3) n=<Id>
        (
          <LPAR> e1=BA() { arg= e1; } <RPAR> { t = new ASTApp(new ASTId(n.image), arg); }
          |
          { t = new ASTId(n.image); }
        )
    | n=<String> { t = new ASTString(n.image); }
    | LOOKAHEAD(2) <UNIT> { t = new ASTUnit(); }
    | <BOX> t=Fact() { t = new ASTBox(t); }
    | <DREF> t=Fact() { t = new ASTDeref(t); }
    | <MINUS> t=Fact() { t = new ASTNeg(t); }
    | <NOT> t=Fact() { t = new ASTNot(t); }
    | <IF> <LPAR> t=BA() <RPAR> <LBRA> e1=Let() <RBRA> <ELSE> <LBRA> e2=Let() <RBRA>
      { t = new ASTIf(t, e1, e2); }
    | <WHILE> <LPAR> t=BA() <RPAR> <LBRA> body=Let() <RBRA>
      { t = new ASTWhile(t, body); }
    | <MATCH> t=BA() <LBRA> 
      (
        <NIL> <MATCH_ARROW> e1=Let() <VBAR> n=<Id> { headVar = n.image; } <DCOLON> n=<Id> { tailVar = n.image; } <MATCH_ARROW> e2=Let() 
        { t = new ASTMatch(t, e1, headVar, tailVar, e2); }
        |
        {String firstCase; String firstVar;}
        <HASH> 
        ( n=<Id> { firstCase = n.image; } | n=<NIL> { firstCase = n.image; } ) <LPAR> 
          ( n=<Id> { firstVar = n.image; } | <UNDERSCORE> { firstVar = "_"; } ) 
        <RPAR> <MATCH_ARROW> e1=Let() 
        { casesBranches.put(firstCase, new ASTCaseBranch(firstVar, e1)); }
        (
          {String caseName; String caseVar;}
          <VBAR> <HASH> 
          ( n=<Id> { caseName = n.image; } | n=<NIL> { caseName = n.image; } ) <LPAR> 
            ( n=<Id> { caseVar = n.image; } | <UNDERSCORE> { caseVar = "_"; } ) 
          <RPAR> <MATCH_ARROW> e2=Let()
          { casesBranches.put(caseName, new ASTCaseBranch(caseVar, e2)); }
        )*
        { t = new ASTCaseMatch(t, casesBranches); }
      )
      <RBRA>
    | <FN> 
      (
        LOOKAHEAD(3) 
        { String paramName; }
        ( n=<Id> { paramName = n.image; } | <UNDERSCORE> { paramName = "_"; } ) 
        <COLON> paramType=TypeExpr() 
        { 
          params.add(paramName); 
          paramTypes.add(paramType); 
        }
        ( <COMMA> 
          { String nextParamName; }
          ( n=<Id> { nextParamName = n.image; } | <UNDERSCORE> { nextParamName = "_"; } ) 
          <COLON> paramType=TypeExpr() 
          { 
            params.add(nextParamName); 
            paramTypes.add(paramType);
          } 
        )*
        <ARROW> <LBRA> e2 = Let() <RBRA> 
        { t = new ASTFun(params, paramTypes, e2); }
        |
        { String paramName; }
        ( n=<Id> { paramName = n.image; } | <UNDERSCORE> { paramName = "_"; } )
        { params.add(paramName); }
        ( <COMMA> 
          { String nextParamName; }
          ( n = <Id> { nextParamName = n.image; } | <UNDERSCORE> { nextParamName = "_"; } ) 
          { params.add(nextParamName); } 
        )*
        <ARROW> <LBRA> e2 = Let() <RBRA> 
        { t = new ASTFun(params, e2); }
      )
    | <HASH> 
      ( n=<Id> | n=<NIL> )  // For teacher examples
      (
        <LPAR> e1=BA() <RPAR> { t = new ASTVariant(n.image, e1); }
      )
    | <LBRA>
      (
        <HASH> n=<Id> <EQUAL> e1=BA() { structFields.put(n.image, e1); }
        (
          <COMMA> <HASH> n=<Id> <EQUAL> e1=BA() { structFields.put(n.image, e1); }
        )*
      )?
      <RBRA> { t = new ASTStructLiteral(structFields); }
    | <PRINT> t=Fact() { t = new ASTPrint(t); }
    | <PRINTLN> t=Fact() { t = new ASTPrintln(t); }
    | LOOKAHEAD(1) <LPAR> t=Let() <RPAR>
  )
  (
    LOOKAHEAD(2) <DOT> <HASH> n=<Id> { t = new ASTFieldAccess(t, n.image); }
  )*
  { return t; }
}

ASTType AtomicType():
{
  ASTType t;
  Token id;
}
{
  (
    <UNIT> { t = new ASTTUnit(); }
    |
    <INT> { t = new ASTTInt(); }
    |
    <BOOL> { t = new ASTTBool(); }
    |
    <STRING> { t = new ASTTString(); }
    |
    id = <Id> { t = new ASTTId(id.image); }
  )
  { return t; }
}

ASTType TypeFactor():
{
  ASTType t;
  ASTType elementType;
  Map<String, ASTType> fields;
}
{
  (
    t = AtomicType()
    |
    <REF> <LT> elementType = TypeExpr() <GT> { t = new ASTTRef(elementType); }
    |
    <LIST> <LT> elementType = TypeExpr() <GT> { t = new ASTTList(elementType); }
    |
    <STRUCT> <LBRA> fields = FieldTypeList() <RBRA> { t = new ASTTStruct(fields); }
    |
    <UNION> <LBRA> fields = FieldTypeList() <RBRA> { t = new ASTTUnion(fields); }
    |
    <LPAR> t = TypeExpr() <RPAR>
  )
  { return t; }
}

ASTType TypeExpr():
{
  ASTType t1, t2;
}
{
  t1 = TypeFactor()
  (
    <MATCH_ARROW> t2 = TypeExpr()
    {
      t1 = new ASTTArrow(t1, t2);
    }
  )?
  { return t1; }
}

Map<String, ASTType> FieldTypeList():
{
  Map<String, ASTType> fields = new HashMap<String, ASTType>();
  Token fieldName;
  ASTType fieldType;
}
{
  (
    <HASH> 
    ( fieldName = <Id> | fieldName = <NIL> )  // accept nil too for teacher examples
    <COLON> fieldType = TypeExpr() 
    { fields.put(fieldName.image, fieldType); }
    (
      <COMMA> <HASH> 
      ( fieldName = <Id> | fieldName = <NIL> )
      <COLON> fieldType = TypeExpr()
      { fields.put(fieldName.image, fieldType); }
    )*
  )?
  { return fields; }
}